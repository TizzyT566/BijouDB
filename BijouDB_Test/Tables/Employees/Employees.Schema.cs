using BijouDB;
using BijouDB.DataTypes;
using System.Numerics;

namespace BijouDB_Test.Tables;

//public struct Employee
//{
//    public string Name;
//    public int Number;
//    public long Age;
//    public Employees Manager;
//    public BigInteger Points;
//}

public partial class Employees : Table
{
    public Employees() { } // Required default constructor

    public static readonly IndexsColumn<Employees, @string> NameColumn; // Used to represent the entire column of this table
    private string? _name; // Used to temporarily store values if the record isn't yet saved on disk.
    public string Name // Used to get/set the records specific column value
    {
        get => OnDisk ? NameColumn.Get(this) : _name!;
        set
        {
            if (OnDisk) NameColumn.Set(this, value);
            else _name = value;
        }
    }

    public static readonly IndexsColumn<Employees, @int> NumberColumn;
    private int? _number;
    public int Number
    {
        get => OnDisk ? NumberColumn.Get(this) : (int)_number!;
        set
        {
            if (OnDisk) NumberColumn.Set(this, value);
            else _number = value;
        }
    }

    public static readonly IndexsColumn<Employees, @long> AgeColumn;
    private long? _age;
    public long Age
    {
        get => OnDisk ? AgeColumn.Get(this) : (long)_age!;
        set
        {
            if (OnDisk) AgeColumn.Set(this, value);
            else _age = value;
        }
    }

    public static readonly IndexsColumn<Employees, record<Employees>> ManagerColumn;
    private Employees? _manager;
    public Employees Manager
    {
        get => OnDisk ? ManagerColumn.Get(this) : _manager!;
        set
        {
            if (OnDisk) ManagerColumn.Set(this, value);
            else _manager = value;
        }
    }

    public static readonly IndexsColumn<Employees, @bint.nullable> PointsColumn;
    private BigInteger? _points;
    public BigInteger? Points
    {
        get => OnDisk ? PointsColumn.Get(this) : _points;
        set
        {
            if (OnDisk) PointsColumn.Set(this, value!);
            else _points = value;
        }
    }

    public static readonly RefersColumn<Employees, Employees> EmployeeReferencesColumn; // Used to reference other records in other tables related to table (similar to foriegn keys)
    public IReadOnlySet<Guid> EmployeeReferences => EmployeeReferencesColumn.Get(this); // Access references a specific record

    private static readonly Func<Employees, bool> RemoveRecord; // Remove operations are tailored to each table, and generated by the ColumnBuilder
    public bool Remove() => RemoveRecord(this);

    static Employees()
    {
        // Instantiate user defined columns
        new ColumnBuilder<Employees>()
            .Indexs(out NameColumn, ColumnType.Unique)
            .Indexs(out NumberColumn, ColumnType.Indexed)
            .Indexs(out AgeColumn)
            .Indexs(out ManagerColumn)
            .Indexs(out PointsColumn)
            .Refers(out EmployeeReferencesColumn, () => ManagerColumn, true)
            .Remove(out RemoveRecord);
    }
}